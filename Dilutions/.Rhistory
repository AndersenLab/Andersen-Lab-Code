for (j in seq(2,length(highRecipe))){
highRecipe[row,j] = as.numeric(as.character(highRecipe[row,j]))
}
}
}
View(recipe)
for(m in seq(2,5)){
recipe[,m] = as.numeric(as.character(recipe[,m]))
}
View(recipe)
maxDiluentAmount = max(recipe[,4])
totalMedium = 6100
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
recipe[,3] = as.numeric(recipe[,3]) - maxDiluentAmount
recipe[,6] = maxDiluentAmount - as.numeric(recipe[,4])
View(recipe)
View(recipe)
recipe$solv = rep(min(as.numeric(as.character(recipe$solv)))+((concentration/100)*volume), length(recipe[,1]))
recipe[,4] = as.numeric(as.character(recipe[,4]))
colnames(recipe) = c("Dil.", "Conc. (µM)","S med./Lys Mix (µL)", paste(compound, "at", stock2/1000, "mM"), "100 mg/mL Bact. Lys. (µL)", paste(recipe$solvent[1],"(µL)"))
View(recipe)
((concentration/100)*volume)
(concentration/100)
volume
recipe$solv = rep(min(recipe$solv)+recipe[5], length(recipe[,1]))
View(recipe)
#Pull compound and solvent info from csv
compound = as.character(curves2[i,1])
solvent = as.character(curves2[i,3])
stock = as.numeric(as.character(curves2[i,4]))
stock1 = stock*1000
#Read in the dilution curves and save as a numeric vector
dilutes = as.character(as.character(curves2[i,5]))
dilutes = gsub(" ", "", dilutes)
dilutes = as.numeric(unlist(strsplit(dilutes, ",")))
#Get the date
date = Sys.Date()
date = as.character(format(date, format = "%m%d%Y"))
#This section checks a series of ten-fold dilutions to see which stock concentration is most effecient at creating a dilution curve that is "pipettable" (not pipetting less than .5 ul), and not above 1% diluent so as to control for diluent effects
tenfolds = c(stock1/10000, stock1/1000, stock1/100, stock1/10, stock1)
count = c()
for (j in seq(1,length(tenfolds))) {
#Create a recipe data frame for each of the 10 fold dilutions listed above
recipe = as.data.frame(makeDilute(dilutes,tenfolds[j],volume))
#Count the total dilution amounts and check how many fall in our magic range of 0.5<x<12, 12 is 1% of the 1200 uL volume we are making up
count[j] = sum(as.numeric(as.character(recipe[,4])) >=.5 & as.numeric(as.character(recipe[,4])) <= 12)
}
#Check if all of the counts are zero, if this is true, you cannot make of the dilutions with the stock concentration you already have
if (all(count == 0L) == TRUE){
#Sets brake variable equal to TRUE, this is used in the markdown file to tell us that our stock is not concentrated enough for this curve
brake = TRUE
} else {
brake = FALSE
}
#Determine which dilution has the highest number of dilutions that can be made
index = which(count == max(count))
stock2 = tenfolds[index]
#If multiple stocks can make the same number of dilutions, take the lower concentration stock, this is arbitrary, as anyone could be used. However, using the lowest working stock controls pretty well for only needing to use a higher stock later on.
stock2 = stock2[1]
#Make the recipe
recipe = as.data.frame(makeDilute(dilutes,stock2, volume))
goodrows = c()
tooHigh = c()
#Check which rows have under 1% diluent and which have over
for (k in seq(1,nrow(recipe))){
if (as.numeric(as.character(recipe[k,4])) <= 12 & as.numeric(as.character(recipe[k,4])) >= .2 | as.numeric(as.character(recipe[k,4])) == 0){
goodrows = append(goodrows, as.numeric(k))
}
if (as.numeric(as.character(recipe[k,4])) > 12){
tooHigh = append(tooHigh, as.numeric(k))
}
}
#Separate the rows
high = recipe[tooHigh,]
recipe = recipe[goodrows,]
#Get the concentrations that don't fall under 1%
higherConcs = as.numeric(as.character(high[,2]))
#Check if you have concentrations that don't fall under 1%
if (length(higherConcs) > 0){
higherStocks = c()
currentStock = stock2
#For every step between your working stock and concentrated stock, ceoncetrate 10-fold
while (currentStock <= stock1){
higherStocks = append(higherStocks, currentStock)
currentStock = currentStock*10
}
#For each of the higher concentrated stocks, see if all of the more concentrated solutions fall in the magic range
workStocks = c()
for (l in seq(1,length(higherStocks))){
highRecipe = as.data.frame(makeDilute(higherConcs,higherStocks[l],volume))
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.character)
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.numeric)
if (all(highRecipe[,4] >= .2) & all(highRecipe[,4] <= 12)){
workStocks = append(workStocks, higherStocks[l])
}
}
#Of the working stocks (ones that fit the above criteria), take the most dilute
finalHigherStock = min(workStocks)
#Make the recipe for the higher concentrations
highRecipe = as.data.frame(makeDilute(higherConcs, finalHigherStock, volume))
for (row in seq(1,nrow(highRecipe))){
for (j in seq(2,length(highRecipe))){
highRecipe[row,j] = as.numeric(as.character(highRecipe[row,j]))
}
}
}
for(m in seq(2,5)){
recipe[,m] = as.numeric(as.character(recipe[,m]))
}
if(exists("highRecipe")){
for(n in seq(2,5)){
highRecipe[,n] = as.numeric(as.character(highRecipe[,n]))
}
if(max(recipe[,6]) > max(highRecipe[,4])){
maxDiluentAmount = max(recipe[,4])
} else {
maxDiluentAmount = max(highRecipe[,4])
}
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe) + nrow(highRecipe)))
highRecipe[,3] = as.numeric(highRecipe[,3]) - maxDiluentAmount
highRecipe[,6] = maxDiluentAmount - as.numeric(highRecipe[,4])
} else {
maxDiluentAmount = max(recipe[,4])
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
}
recipe[,3] = as.numeric(recipe[,3]) - maxDiluentAmount
recipe[,6] = maxDiluentAmount - as.numeric(recipe[,4])
#Pull compound and solvent info from csv
compound = as.character(curves2[i,1])
solvent = as.character(curves2[i,3])
stock = as.numeric(as.character(curves2[i,4]))
stock1 = stock*1000
#Read in the dilution curves and save as a numeric vector
dilutes = as.character(as.character(curves2[i,5]))
dilutes = gsub(" ", "", dilutes)
dilutes = as.numeric(unlist(strsplit(dilutes, ",")))
#Get the date
date = Sys.Date()
date = as.character(format(date, format = "%m%d%Y"))
#This section checks a series of ten-fold dilutions to see which stock concentration is most effecient at creating a dilution curve that is "pipettable" (not pipetting less than .5 ul), and not above 1% diluent so as to control for diluent effects
tenfolds = c(stock1/10000, stock1/1000, stock1/100, stock1/10, stock1)
count = c()
for (j in seq(1,length(tenfolds))) {
#Create a recipe data frame for each of the 10 fold dilutions listed above
recipe = as.data.frame(makeDilute(dilutes,tenfolds[j],volume))
#Count the total dilution amounts and check how many fall in our magic range of 0.5<x<12, 12 is 1% of the 1200 uL volume we are making up
count[j] = sum(as.numeric(as.character(recipe[,4])) >=.5 & as.numeric(as.character(recipe[,4])) <= 12)
}
#Check if all of the counts are zero, if this is true, you cannot make of the dilutions with the stock concentration you already have
if (all(count == 0L) == TRUE){
#Sets brake variable equal to TRUE, this is used in the markdown file to tell us that our stock is not concentrated enough for this curve
brake = TRUE
} else {
brake = FALSE
}
#Determine which dilution has the highest number of dilutions that can be made
index = which(count == max(count))
stock2 = tenfolds[index]
#If multiple stocks can make the same number of dilutions, take the lower concentration stock, this is arbitrary, as anyone could be used. However, using the lowest working stock controls pretty well for only needing to use a higher stock later on.
stock2 = stock2[1]
#Make the recipe
recipe = as.data.frame(makeDilute(dilutes,stock2, volume))
goodrows = c()
tooHigh = c()
#Check which rows have under 1% diluent and which have over
for (k in seq(1,nrow(recipe))){
if (as.numeric(as.character(recipe[k,4])) <= 12 & as.numeric(as.character(recipe[k,4])) >= .2 | as.numeric(as.character(recipe[k,4])) == 0){
goodrows = append(goodrows, as.numeric(k))
}
if (as.numeric(as.character(recipe[k,4])) > 12){
tooHigh = append(tooHigh, as.numeric(k))
}
}
#Separate the rows
high = recipe[tooHigh,]
recipe = recipe[goodrows,]
#Get the concentrations that don't fall under 1%
higherConcs = as.numeric(as.character(high[,2]))
#Check if you have concentrations that don't fall under 1%
if (length(higherConcs) > 0){
higherStocks = c()
currentStock = stock2
#For every step between your working stock and concentrated stock, ceoncetrate 10-fold
while (currentStock <= stock1){
higherStocks = append(higherStocks, currentStock)
currentStock = currentStock*10
}
#For each of the higher concentrated stocks, see if all of the more concentrated solutions fall in the magic range
workStocks = c()
for (l in seq(1,length(higherStocks))){
highRecipe = as.data.frame(makeDilute(higherConcs,higherStocks[l],volume))
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.character)
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.numeric)
if (all(highRecipe[,4] >= .2) & all(highRecipe[,4] <= 12)){
workStocks = append(workStocks, higherStocks[l])
}
}
#Of the working stocks (ones that fit the above criteria), take the most dilute
finalHigherStock = min(workStocks)
#Make the recipe for the higher concentrations
highRecipe = as.data.frame(makeDilute(higherConcs, finalHigherStock, volume))
for (row in seq(1,nrow(highRecipe))){
for (j in seq(2,length(highRecipe))){
highRecipe[row,j] = as.numeric(as.character(highRecipe[row,j]))
}
}
}
for(m in seq(2,5)){
recipe[,m] = as.numeric(as.character(recipe[,m]))
}
maxDiluentAmount = max(recipe[,4])
totalMedium = 6100
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
recipe[,3] = as.numeric(recipe[,3]) - maxDiluentAmount
recipe[,6] = maxDiluentAmount - as.numeric(recipe[,4])
View(recipe)
recipe$solv = rep(min(recipe$solv)+recipe[1,5], length(recipe[,1]))
View(recipe)
colnames(recipe) = c("Dil.", "Conc. (µM)","S med./Lys Mix (µL)", paste(compound, "at", stock2/1000, "mM"), "100 mg/mL Bact. Lys. (µL)", paste(recipe$solvent[1],"(µL)"))
View(recipe)
View(recipe)
.1*volume
lysate = .1 * volume * length(dilutes)
smed = volume*length(dilutes) - lysate
adjLysate = lysate * (1+(1/60))
tot = adjLysate * 10
adjSmed = tot - adjLysate
if(exists("highRecipe")){
nrowR = nrow(recipe)
nrowHR = nrow(highRecipe)
for(n in seq(2,5)){
highRecipe[,n] = as.numeric(as.character(highRecipe[,n]))
}
if(max(recipe[,6]) > max(highRecipe[,4])){
maxDiluentAmount = max(recipe[,4])
} else {
maxDiluentAmount = max(highRecipe[,4])
}
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe) + nrow(highRecipe)))
highRecipe[,3] = as.numeric(highRecipe[,3]) - maxDiluentAmount
highRecipe[,6] = maxDiluentAmount - as.numeric(highRecipe[,4])
} else {
nrowR = nrow(recipe)
nrowHR = 0
maxDiluentAmount = max(recipe[,4])
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
}
recipe[,3] = as.numeric(recipe[,3]) - maxDiluentAmount
recipe[,6] = maxDiluentAmount - as.numeric(recipe[,4])
View(recipe)
concentration = 3
#Pull compound and solvent info from csv
compound = as.character(curves2[i,1])
solvent = as.character(curves2[i,3])
stock = as.numeric(as.character(curves2[i,4]))
stock1 = stock*1000
#Read in the dilution curves and save as a numeric vector
dilutes = as.character(as.character(curves2[i,5]))
dilutes = gsub(" ", "", dilutes)
dilutes = as.numeric(unlist(strsplit(dilutes, ",")))
#Get the date
date = Sys.Date()
date = as.character(format(date, format = "%m%d%Y"))
#This section checks a series of ten-fold dilutions to see which stock concentration is most effecient at creating a dilution curve that is "pipettable" (not pipetting less than .5 ul), and not above 1% diluent so as to control for diluent effects
tenfolds = c(stock1/10000, stock1/1000, stock1/100, stock1/10, stock1)
count = c()
for (j in seq(1,length(tenfolds))) {
#Create a recipe data frame for each of the 10 fold dilutions listed above
recipe = as.data.frame(makeDilute(dilutes,tenfolds[j],volume))
#Count the total dilution amounts and check how many fall in our magic range of 0.5<x<12, 12 is 1% of the 1200 uL volume we are making up
count[j] = sum(as.numeric(as.character(recipe[,4])) >=.5 & as.numeric(as.character(recipe[,4])) <= 12)
}
#Check if all of the counts are zero, if this is true, you cannot make of the dilutions with the stock concentration you already have
if (all(count == 0L) == TRUE){
#Sets brake variable equal to TRUE, this is used in the markdown file to tell us that our stock is not concentrated enough for this curve
brake = TRUE
} else {
brake = FALSE
}
#Determine which dilution has the highest number of dilutions that can be made
index = which(count == max(count))
stock2 = tenfolds[index]
#If multiple stocks can make the same number of dilutions, take the lower concentration stock, this is arbitrary, as anyone could be used. However, using the lowest working stock controls pretty well for only needing to use a higher stock later on.
stock2 = stock2[1]
#Make the recipe
recipe = as.data.frame(makeDilute(dilutes,stock2, volume))
goodrows = c()
tooHigh = c()
#Check which rows have under 1% diluent and which have over
for (k in seq(1,nrow(recipe))){
if (as.numeric(as.character(recipe[k,4])) <= 12 & as.numeric(as.character(recipe[k,4])) >= .2 | as.numeric(as.character(recipe[k,4])) == 0){
goodrows = append(goodrows, as.numeric(k))
}
if (as.numeric(as.character(recipe[k,4])) > 12){
tooHigh = append(tooHigh, as.numeric(k))
}
}
#Separate the rows
high = recipe[tooHigh,]
recipe = recipe[goodrows,]
#Get the concentrations that don't fall under 1%
higherConcs = as.numeric(as.character(high[,2]))
#Check if you have concentrations that don't fall under 1%
if (length(higherConcs) > 0){
higherStocks = c()
currentStock = stock2
#For every step between your working stock and concentrated stock, ceoncetrate 10-fold
while (currentStock <= stock1){
higherStocks = append(higherStocks, currentStock)
currentStock = currentStock*10
}
#For each of the higher concentrated stocks, see if all of the more concentrated solutions fall in the magic range
workStocks = c()
for (l in seq(1,length(higherStocks))){
highRecipe = as.data.frame(makeDilute(higherConcs,higherStocks[l],volume))
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.character)
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.numeric)
if (all(highRecipe[,4] >= .2) & all(highRecipe[,4] <= 12)){
workStocks = append(workStocks, higherStocks[l])
}
}
#Of the working stocks (ones that fit the above criteria), take the most dilute
finalHigherStock = min(workStocks)
#Make the recipe for the higher concentrations
highRecipe = as.data.frame(makeDilute(higherConcs, finalHigherStock, volume))
for (row in seq(1,nrow(highRecipe))){
for (j in seq(2,length(highRecipe))){
highRecipe[row,j] = as.numeric(as.character(highRecipe[row,j]))
}
}
}
for(m in seq(2,5)){
recipe[,m] = as.numeric(as.character(recipe[,m]))
}
#################################
#################################
#################################
#################################
#################################
#################################
#################################
#################################
lysate = .1 * volume * length(dilutes)
smed = volume*length(dilutes) - lysate
adjLysate = lysate * (1+(1/60))
tot = adjLysate * 10
adjSmed = tot - adjLysate
if(exists("highRecipe")){
nrowR = nrow(recipe)
nrowHR = nrow(highRecipe)
for(n in seq(2,5)){
highRecipe[,n] = as.numeric(as.character(highRecipe[,n]))
}
if(max(recipe[,6]) > max(highRecipe[,4])){
maxDiluentAmount = max(recipe[,4])
} else {
maxDiluentAmount = max(highRecipe[,4])
}
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe) + nrow(highRecipe)))
highRecipe[,3] = as.numeric(highRecipe[,3]) - maxDiluentAmount
highRecipe[,6] = maxDiluentAmount - as.numeric(highRecipe[,4])
} else {
nrowR = nrow(recipe)
nrowHR = 0
maxDiluentAmount = max(recipe[,4])
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
}
recipe[,3] = as.numeric(recipe[,3]) - maxDiluentAmount
recipe[,6] = maxDiluentAmount - as.numeric(recipe[,4])
View(recipe)
View(recipe)
concPercent = concentration/100
concVol = concPercent*volume
.01*totalMedium
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
i = 1
#Pull compound and solvent info from csv
compound = as.character(curves2[i,1])
solvent = as.character(curves2[i,3])
stock = as.numeric(as.character(curves2[i,4]))
stock1 = stock*1000
#Read in the dilution curves and save as a numeric vector
dilutes = as.character(as.character(curves2[i,5]))
dilutes = gsub(" ", "", dilutes)
dilutes = as.numeric(unlist(strsplit(dilutes, ",")))
#Get the date
date = Sys.Date()
date = as.character(format(date, format = "%m%d%Y"))
#This section checks a series of ten-fold dilutions to see which stock concentration is most effecient at creating a dilution curve that is "pipettable" (not pipetting less than .5 ul), and not above 1% diluent so as to control for diluent effects
tenfolds = c(stock1/10000, stock1/1000, stock1/100, stock1/10, stock1)
count = c()
for (j in seq(1,length(tenfolds))) {
#Create a recipe data frame for each of the 10 fold dilutions listed above
recipe = as.data.frame(makeDilute(dilutes,tenfolds[j],volume))
#Count the total dilution amounts and check how many fall in our magic range of 0.5<x<12, 12 is 1% of the 1200 uL volume we are making up
count[j] = sum(as.numeric(as.character(recipe[,4])) >=.5 & as.numeric(as.character(recipe[,4])) <= 12)
}
#Check if all of the counts are zero, if this is true, you cannot make of the dilutions with the stock concentration you already have
if (all(count == 0L) == TRUE){
#Sets brake variable equal to TRUE, this is used in the markdown file to tell us that our stock is not concentrated enough for this curve
brake = TRUE
} else {
brake = FALSE
}
#Determine which dilution has the highest number of dilutions that can be made
index = which(count == max(count))
stock2 = tenfolds[index]
#If multiple stocks can make the same number of dilutions, take the lower concentration stock, this is arbitrary, as anyone could be used. However, using the lowest working stock controls pretty well for only needing to use a higher stock later on.
stock2 = stock2[1]
#Make the recipe
recipe = as.data.frame(makeDilute(dilutes,stock2, volume))
goodrows = c()
tooHigh = c()
#Check which rows have under 1% diluent and which have over
for (k in seq(1,nrow(recipe))){
if (as.numeric(as.character(recipe[k,4])) <= concVolume & as.numeric(as.character(recipe[k,4])) >= .2 | as.numeric(as.character(recipe[k,4])) == 0){
goodrows = append(goodrows, as.numeric(k))
}
if (as.numeric(as.character(recipe[k,4])) > concVolume){
tooHigh = append(tooHigh, as.numeric(k))
}
}
#Separate the rows
high = recipe[tooHigh,]
recipe = recipe[goodrows,]
#Get the concentrations that don't fall under concentration percentage
higherConcs = as.numeric(as.character(high[,2]))
#Check if you have concentrations that don't fall under concentration percentage
if (length(higherConcs) > 0){
higherStocks = c()
currentStock = stock2
#For every step between your working stock and concentrated stock, ceoncetrate 10-fold
while (currentStock <= stock1){
higherStocks = append(higherStocks, currentStock)
currentStock = currentStock*10
}
#For each of the higher concentrated stocks, see if all of the more concentrated solutions fall in the magic range
workStocks = c()
for (l in seq(1,length(higherStocks))){
highRecipe = as.data.frame(makeDilute(higherConcs,higherStocks[l],volume))
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.character)
highRecipe[,2:5] = sapply(highRecipe[,2:5],as.numeric)
if (all(highRecipe[,4] >= .2) & all(highRecipe[,4] <= concVolume)){
workStocks = append(workStocks, higherStocks[l])
}
}
#Of the working stocks (ones that fit the above criteria), take the most dilute
finalHigherStock = min(workStocks)
#Make the recipe for the higher concentrations
highRecipe = as.data.frame(makeDilute(higherConcs, finalHigherStock, volume))
for (row in seq(1,nrow(highRecipe))){
for (j in seq(2,length(highRecipe))){
highRecipe[row,j] = as.numeric(as.character(highRecipe[row,j]))
}
}
}
for(m in seq(2,5)){
recipe[,m] = as.numeric(as.character(recipe[,m]))
}
#################################
#################################
#################################
#################################
#################################
#################################
#################################
#################################
## work out the right concentration for the total medium amount so that added diluent is adjusted for
#########
View(recipe)
View(recipe)
View(recipe)
lysate = .1 * volume * length(dilutes)
smed = volume*length(dilutes) - lysate
adjLysate = lysate * (1+(1/60))
tot = adjLysate * 10
adjSmed = tot - adjLysate
nrowR = nrow(recipe)
nrowHR = 0
maxDiluentAmount = max(recipe[,4])
totalMedium = round(adjLysate + adjSmed,0)
stockDiluentAmount = ((concentration/100)*totalMedium) - (maxDiluentAmount * (nrow(recipe)))
recipe[,6] = concVolume - as.numeric(recipe[,4])
View(recipe)
recipe[,3] = as.numeric(recipe[,3]) - concVolume
View(recipe)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
source('~/Andersen-Lab-Code/Dilutions/Dilutions2.R', echo=TRUE)
